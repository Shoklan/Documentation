drawPlot(carData, milesPerGallon, cylinders)
g = ggplot(carData, aes(x=milesPerGallon, y= quarterMileRun))
g = g + geom_point(size = 6, colour = "black", alpha=.3)
g = g + geom_point(size = 5, colour = "red", alpha=.2)
g = g + geom_smooth(method = "lm", colour = "black")
g
drawPlot <- function(data, varOne, varTwo){
assign("outcome", varOne)
assign("predictor", varTwo)
g = ggplot(data, aes(x=predictor, y=outcome))
g = g + geom_point(size = 6, colour = "black", alpha=.3)
g = g + geom_point(size = 5, colour = "red", alpha=.2)
g = g + geom_smooth(method = "lm", colour = "black")
g
}
drawPlot(carData, milesPerGallon, cylinders)
drawPlot <- function(data, varOne, varTwo){
assign("y", varOne)
assign("x", varTwo)
g = ggplot(data, aes(x=x, y=y))
g = g + geom_point(size = 6, colour = "black", alpha=.3)
g = g + geom_point(size = 5, colour = "red", alpha=.2)
g = g + geom_smooth(method = "lm", colour = "black")
g
}
drawPlot(carData, milesPerGallon, cylinders)
g = ggplot(carData, aes(x=quarterMileRun, y=milesPerGallon))
drawPlot <- function(data, varOne, varTwo){
assign("outcome", varOne)
assign("x", varTwo)
g = ggplot(data, aes(x=outcome, y=y))
g = g + geom_point(size = 6, colour = "black", alpha=.3)
g = g + geom_point(size = 5, colour = "red", alpha=.2)
g = g + geom_smooth(method = "lm", colour = "black")
g
}
drawPlot(carData, milesPerGallon, cylinders)
drawPlot <- function(data, varOne, varTwo){
assign("y", varOne)
assign("x", varTwo)
g = ggplot(data, aes(x=outcome, y=y))
g = g + geom_point(size = 6, colour = "black", alpha=.3)
g = g + geom_point(size = 5, colour = "red", alpha=.2)
g = g + geom_smooth(method = "lm", colour = "black")
g
}
drawPlot(carData, milesPerGallon, cylinders)
drawPlot <- function(data, varOne, varTwo){
assign("y", varOne)
assign("x", varTwo)
g = ggplot(data, aes(x=outcome, y=y))
g = g + geom_point(size = 6, colour = "black", alpha=.3)
g = g + geom_point(size = 5, colour = "red", alpha=.2)
g = g + geom_smooth(method = "lm", colour = "black")
g
}
drawPlot(carData, milesPerGallon, cylinders)
rm(drawPlot)
drawPlot <- function(data, varOne, varTwo){
assign("y", varOne)
assign("x", varTwo)
g = ggplot(data, aes(x=outcome, y=y))
g = g + geom_point(size = 6, colour = "black", alpha=.3)
g = g + geom_point(size = 5, colour = "red", alpha=.2)
g = g + geom_smooth(method = "lm", colour = "black")
g
}
drawPlot <- function(data, varOne, varTwo){
assign("y", varOne)
assign("x", varTwo)
g = ggplot(data, aes(x=x, y=y))
g = g + geom_point(size = 6, colour = "black", alpha=.3)
g = g + geom_point(size = 5, colour = "red", alpha=.2)
g = g + geom_smooth(method = "lm", colour = "black")
g
}
drawPlot(carData, milesPerGallon, cylinders)
drawPlot(carData, milesPerGallon, displacement)
drawPlot(carData, milesPerGallon, cylinders)
drawPlot(carData, milesPerGallon, displacement)
print(g)
drawPlot(mtcars, mpg, wt)
print(ls())
length(colnames(mtcars))
for(val in colnames(mtcars)[2:11]){
drawPlot(mtcars, mpg, val)
}
for(val in colnames(mtcars)[2:11]){
drawPlot(mtcars, mpg, val)
print(g)
}
drawPlot <- function(data, varOne, varTwo){
assign("y", varOne)
assign("x", varTwo)
print(ls())
g = ggplot(data, aes(x=x, y=y))
g = g + geom_point(size = 6, colour = "black", alpha=.3)
g = g + geom_point(size = 5, colour = "red", alpha=.2)
g = g + geom_smooth(method = "lm", colour = "black")
print(g)
}
drawPlot(mtcars, mpg, val)
for(val in colnames(mtcars)[2:11]){
drawPlot(mtcars, mpg, val)
print(g)
}
drawPlot <- function(data, varOne, varTwo){
assign("y", varOne)
assign("x", varTwo)
print(ls())
g = ggplot(data, aes(x=x, y=y))
g = g + geom_point(size = 6, colour = "black", alpha=.3)
g = g + geom_point(size = 5, colour = "red", alpha=.2)
g = g + geom_smooth(method = "lm", colour = "black")
return(g)
}
for(val in colnames(mtcars)[2:11]){
graph <- drawPlot(mtcars, mpg, val)
print(graph)
}
for(val in colnames(mtcars)[2:11]){
print(val)
graph <- drawPlot(mtcars, mpg, val)
print(graph)
}
par(mfrow=c(2,5))
for(val in colnames(mtcars)[2:11]){
print(val)
graph <- drawPlot(mtcars, mpg, val)
print(graph)
}
library(grid)
graphVector <- NULL
graphVector <- NULL
for(val in colnames(mtcars)[2:11]){
print(val)
graph <- drawPlot(mtcars, mpg, val)
graphVector <- c(graphVector, graph)
}
class(graphVector)
print graphVector
graphVector
print(graphVector[[1]])
graphVector[[1]]
graphVector[1
]
rm(diamond)
rm carData
rm(carData)
rm(ls())
rm(rem =ls())
rm(rm =ls())
ls()
data(mtcars)
library(dplyr)
library(ggplot2)
for(column in colnames(mtcars)){print(column)}
for(column in colnames(mtcars)){assign("x", column); print(mtcars[,x])}
for(column in colnames(mtcars)[2:11]){assign("x", column); print(mtcars[,x])}
for(column in colnames(mtcars)[2:11]){assign("x", column); print(length(mtcars[,x]))}
for(column in colnames(mtcars)){assign("x", column); print(length(mtcars[,x]))}
vector2 = NULL
assign(vector2[i], 9)
i <- 3
assign(vector2[i], 9)
?print
val = "derp"
paste("Autmatic wins for", val, sep)
paste("Autmatic wins for", val, sep = " ")
paste("Autmatic wins for:", val, sep = " ")
hue <- expression(paste("Autmatic wins for:", val, sep = " "))
hue
eval(hue)
val = " JOHN CENA"
eval(hue)
expression(if( x > y) print("WINNER!"); else print("LOSER!"))
expression(if( x > y) print("WINNER!") else print("LOSER!"))
hue <- expression(if( x > y) print("WINNER!") else print("LOSER!"))
x = 1; y = 2
eval(hue)
for(value in colnames(mtcars)){
print(mean(mtcars[,value]))
}
run <- expression(print(mean(mtcars[,value])))
run <- expression(print(mean(mtcars[,value])))
for(value in colnames(mtcars)){
eval(run)
}
compareSubsets <- expression(
if( mean(subsetOne[,quantifier] > subsetTwo[,quantifier]))
paste("Automatic wins:", quantifier, sep=" ")
paste("Manual wins:", quantifier, sep=" ")
else{
}
)
compareSubsets <- expression(
if( mean(subsetOne[,quantifier] > subsetTwo[,quantifier]))
paste("Automatic wins:", quantifier, sep=" ")
else
paste("Manual wins:", quantifier, sep=" ")
)
compareSubsets <- expression(
if( mean(autoData[,quantifier] > mean(manualData[,quantifier])))
paste("Automatic wins:", quantifier, sep=" ")
paste("Manual wins:", quantifier, sep=" ")
else
)
compareSubsets <- expression(
if( mean(autoData[,quantifier]) > mean(manualData[,quantifier]))
paste("Automatic wins:", quantifier, sep=" ")
else
paste("Manual wins:", quantifier, sep=" ")
)
for(quantifier in colnames(mtcars)){
eval(compareSubsets)
}
manualData <- filter(mtcars, am == MANUAL)
AUTOMATIC <- 0
MANUAL    <- 1
manualData <- filter(mtcars, am == MANUAL)
autoData   <- filter(mtcars, am == AUTOMATIC)
for(quantifier in colnames(mtcars)){
eval(compareSubsets)
}
compareSubsets <- expression(
if( mean(autoData[,quantifier]) > mean(manualData[,quantifier]))
print(paste("Automatic wins:", quantifier, sep=" "))
else
print(paste("Manual wins:", quantifier, sep=" "))
)
for(quantifier in colnames(mtcars)){
eval(compareSubsets)
}
?mtcars
lm(mpg~drat, data = mtcars)
plot(lm(mpg~drat, data = mtcars))
plot(lm(mpg~disp, data = mtcars))
lm(mpg~disp, data = mtcars)
resid(lm(mpg~disp, data = mtcars))
summary(resid(lm(mpg~disp, data = mtcars)))
install.packages(ggally)
install.packages("GGally")
data(mtcars)
library(GGally)
g = ggpairs(mtcars, lower = list(continuous = "smooth"), params = c(method = "loess"))
g
data(mtcars)
library(dplyr)
library(ggplot2)
library(car)
library(ggally)
library(GGally)
AUTOMATIC <- 0
MANUAL    <- 1
manualData <- filter(mtcars, am == MANUAL)
autoData   <- filter(mtcars, am == AUTOMATIC)
quantile(manualData$mpg)
quantile(autoData$mpg)
quantile(manualData$mpg)
quantile(autoData$mpg)
installed.packages()
setdiff
?setdiff
R.version
R.version()
R.version
R.Version()
R.Version
R.version
r = R.Version()
r
r$major
r$major < 10
r$major < "10"
as.integer(r$major) < 10
?paste0
?paste
install.packages("choroplethr")
derp = html("http://www.facebook.com")
install.packages("rvest")
library(rvest)
htmk
html
page = html("http://www.facebook.com")
page
page %>%
html_nodes("strong") %>%
html_text() %>%
as.numeric()
page %>%
html_nodes("title") %>%
html_text() %>%
as.numeric()
page %>%
html_nodes("title") %>%
html_text()
install.packages("shiny")
totalWomen     <- 1122
totalremaining <- 892
nOfIntercourse <- 34036
pCondomUse     <- .64
pCondomBreak   <- .02
pBirthControlFail  <- .09
nofIntercourse * pCondomBreak = nCondomBreak
nCondomBreak nofIntercourse * pCondomBreak
nCondomBreak = nofIntercourse * pCondomBreak
nCondomBreak = nofIntercourse * pCondomBreak
nCondomBreak = nOfIntercourse * pCondomBreak
nCondomBreak
nBCFail = nOfIntercourse * pBirthControlFail
nBCFail
nCasesFinal = nOfItercourse * pTotalFailure
nCasesFinal = nOfIntercourse * pTotalFailure
pTotalFailure = pCondomBreak * pBirthControlFail
pTotalFailure
nCasesFinal = nOfItercourse * pTotalFailure
nCasesFinal = nOfIntercourse * pTotalFailure
nCasesFinal
nCondomBreak  = nOfIntercourse * pCondomBreak
nBCFail       = nOfIntercourse * pBirthControlFail
pTotalFailure = pCondomBreak   * pBirthControlFail
nCasesFinal   = nOfIntercourse * pTotalFailure
nCasesFinal
nDaysInYears   <- 365
nDaysIn5Years  <- nDaysInYears * 5
nDaysIn10Years <- nDaysInYears * 10
nDaysIn15Years <- nDaysInYears * 15
nDaysIn20Years <- nDaysInYears * 20
nDaysIn25Years <- nDaysInYears * 25
nDaysIn25Years / nCasesFinal
paste(nDaysIn10Years, " days: ", nDaysInYear/nCasesFinal, sep="")
nDaysInYears   <- 365
paste(nDaysIn10Years, " days: ", nDaysInYear/nCasesFinal, sep="")
paste(nDaysIn10Years, " days: ", (nDaysInYear/nCasesFinal), sep="")
paste(nDaysIn10Years, " days: ", (nDaysInYears/nCasesFinal), sep="")
outputCalculations <- function(pCondom, pBirth, intercourseCount){
pTotalFailure = pCondom * pBirth
nCasesFinal   = intercourseCount * pTotalFailure
paste("  1 Year: ", nDaysInYear / nCasesFinal, sep="")
paste(" 5 Years: ", nDaysIn5Years / nCasesFinal, sep="")
paste("10 Years: ", nDaysIn10Years / nCasesFinal, sep="")
paste("15 Years: ", nDaysIn15Years / nCasesFinal, sep="")
paste("20 Years: ", nDaysIn20Years / nCasesFinal, sep="")
paste("25 Years: ", nDaysIn25Years / nCasesFinal, sep="")
}
outputCalculations(pCondomBreakStudy, pBirthControlFailPerfect, nOfIntercourse)
pCondomBreakStudy        <- .02
outputCalculations(pCondomBreakStudy, pBirthControlFailPerfect, nOfIntercourse)
pBirthControlFailPerfect <- .001
outputCalculations(pCondomBreakStudy, pBirthControlFailPerfect, nOfIntercourse)
nDaysInYears   <- 365
nDaysIn5Years  <- nDaysInYears * 5
nDaysIn10Years <- nDaysInYears * 10
nDaysIn15Years <- nDaysInYears * 15
nDaysIn20Years <- nDaysInYears * 20
nDaysIn25Years <- nDaysInYears * 25
outputCalculations(pCondomBreakStudy, pBirthControlFailPerfect, nOfIntercourse)
outputCalculations <- function(pCondom, pBirth, intercourseCount){
# number of days in allocated Years
nDaysInYears   <- 365
nDaysIn5Years  <- nDaysInYears * 5
nDaysIn10Years <- nDaysInYears * 10
DaysIn15Years <- nDaysInYears * 15
nDaysIn20Years <- nDaysInYears * 20
nDaysIn25Years <- nDaysInYears * 25
pTotalFailure = pCondom * pBirth
nCasesFinal   = intercourseCount * pTotalFailure
paste("  1 Year: ", nDaysInYear / nCasesFinal, sep="")
paste(" 5 Years: ", nDaysIn5Years / nCasesFinal, sep="")
paste("10 Years: ", nDaysIn10Years / nCasesFinal, sep="")
paste("15 Years: ", nDaysIn15Years / nCasesFinal, sep="")
paste("20 Years: ", nDaysIn20Years / nCasesFinal, sep="")
paste("25 Years: ", nDaysIn25Years / nCasesFinal, sep="")
}
outputCalculations(pCondomBreakStudy, pBirthControlFailPerfect, nOfIntercourse)
outputCalculations <- function(pCondom, pBirth, intercourseCount){
# number of days in allocated Years
nDaysInYears   <- 365
nDaysIn5Years  <- nDaysInYears * 5
nDaysIn10Years <- nDaysInYears * 10
DaysIn15Years  <- nDaysInYears * 15
nDaysIn20Years <- nDaysInYears * 20
nDaysIn25Years <- nDaysInYears * 25
pTotalFailure = pCondom * pBirth
nCasesFinal   = intercourseCount * pTotalFailure
paste("  1 Year: ", nDaysInYears / nCasesFinal, sep="")
paste(" 5 Years: ", nDaysIn5Years / nCasesFinal, sep="")
paste("10 Years: ", nDaysIn10Years / nCasesFinal, sep="")
paste("15 Years: ", nDaysIn15Years / nCasesFinal, sep="")
paste("20 Years: ", nDaysIn20Years / nCasesFinal, sep="")
paste("25 Years: ", nDaysIn25Years / nCasesFinal, sep="")
}
outputCalculations <- function(pCondom, pBirth, intercourseCount){
outputCalculations(pCondomBreakStudy, pBirthControlFailPerfect, nOfIntercourse)
outputCalculations <- function(pCondom, pBirth, intercourseCount){
# number of days in allocated Years
nDaysInYears   <- 365
nDaysIn5Years  <- nDaysInYears * 5
nDaysIn10Years <- nDaysInYears * 10
DaysIn15Years  <- nDaysInYears * 15
nDaysIn20Years <- nDaysInYears * 20
nDaysIn25Years <- nDaysInYears * 25
pTotalFailure = pCondom * pBirth
nCasesFinal   = intercourseCount * pTotalFailure
print(("  1 Year: ", nDaysInYears / nCasesFinal, sep=""))
print(paste(" 5 Years: ", nDaysIn5Years / nCasesFinal, sep=""))
print(paste("10 Years: ", nDaysIn10Years / nCasesFinal, sep=""))
print(paste("15 Years: ", nDaysIn15Years / nCasesFinal, sep=""))
print(paste("20 Years: ", nDaysIn20Years / nCasesFinal, sep=""))
print(paste("25 Years: ", nDaysIn25Years / nCasesFinal, sep=""))
}
outputCalculations <- function(pCondom, pBirth, intercourseCount){
# number of days in allocated Years
nDaysInYears   <- 365
nDaysIn5Years  <- nDaysInYears * 5
nDaysIn10Years <- nDaysInYears * 10
DaysIn15Years  <- nDaysInYears * 15
nDaysIn20Years <- nDaysInYears * 20
nDaysIn25Years <- nDaysInYears * 25
pTotalFailure = pCondom * pBirth
nCasesFinal   = intercourseCount * pTotalFailure
print(paste("  1 Year: ", nDaysInYears / nCasesFinal, sep=""))
print(paste(" 5 Years: ", nDaysIn5Years / nCasesFinal, sep=""))
print(paste("10 Years: ", nDaysIn10Years / nCasesFinal, sep=""))
print(paste("15 Years: ", nDaysIn15Years / nCasesFinal, sep=""))
print(paste("20 Years: ", nDaysIn20Years / nCasesFinal, sep=""))
print(paste("25 Years: ", nDaysIn25Years / nCasesFinal, sep=""))
}
outputCalculations(pCondomBreakStudy, pBirthControlFailPerfect, nOfIntercourse)
pTotal <- (pCondomBreakCDC * pBirthControlFailCDC)/nOfIntercourse
pBirthControlFailCDC     <- .09
pTotal <- (pCondomBreakCDC * pBirthControlFailCDC)/nOfIntercourse
pCondomBreakCDC   <- .18
pTotal <- (pCondomBreakCDC * pBirthControlFailCDC)/nOfIntercourse
pTotal
pTotal <- (pCondomBreakCDC * nOfIntercourse) * (pBirthControlFailCDC * nOfIntercourse)
pTotal
(pCondomBreakCDC * nOfIntercourse)
pTotal <- (pCondomBreakCDC * nOfIntercourse * pBirthControlFailCDC
)
pTotal
vignette(selectInput)
setwd("c:\\Users\\mitcolli\\Documents\\Docs\\code\\Documentation\\rProgramming\\Shiny")
ls()
lsdir()
dir()
download.file(file = "countries.rds", http://shiny.rstudio.com/tutorial/lesson5/census-app/data/counties.rds")
download.file(file = countries.rds", "http://shiny.rstudio.com/tutorial/lesson5/census-app/data/counties.rds")
download.file(file = countries.rds, "http://shiny.rstudio.com/tutorial/lesson5/census-app/data/counties.rds")
download.file("countries.rds", "http://shiny.rstudio.com/tutorial/lesson5/census-app/data/counties.rds")
?download.file
download.file("http://shiny.rstudio.com/tutorial/lesson5/census-app/data/counties.rds", "counties.rds", mode= "wb")
ls
dir
dir()
counties <- readRDS("./census-app/data/counties.rds")
head(counties)
dir()
setwd("census-app/")
ls
dir()
download.file("http://shiny.rstudio.com/tutorial/lesson5/census-app/helpers.R", "helpers.R")
dir()
library(maps)
library(mapproj)
source("census-app/helpers.R")
counties <- readRDS("census-app/data/counties.rds")
percent_map(counties$white, "darkgreen", "% white")
source("helpers.R")
counties <- readRDS("census-app/data/counties.rds")
percent_map(counties$white, "darkgreen", "% white")
ls
dir*()
dir()
setwd("..")
runApp("census-app")
library(shiny)
runApp("census-app")
runApp("census-app")
install.packages("quantmod")
appRun("stickVis")
runApp("stickVis")
runApp("stickVis")
ls
dir()
runApp("IrisClustering")
suppressPackageStartupMessages(library(googleVis))
install.packages("googleVis")
suppressPackageStartupMessages(library(googleVis))
M <gvisMotionChart(Fruits, "Fruit", "Year", options = list(width = 600, height=400))
M <- gvisMotionChart(Fruits, "Fruit", "Year", options = list(width = 600, height=400))
m
M
plot(M)
G <- gvisGeoChart(Exports, locationvar = "Country", colorvar =)
G <- gvisGeoChart(Exports, locationvar = "Country", colorvar = "Profit", optiions = list(width=600, height = 400))
G <- gvisGeoChart(Exports, locationvar = "Country", colorvar = "Profit", options = list(width=600, height = 400))
plot(G)
gvisGeoChart(Exports, locationvar = "Country", colovar = "Profit", options = list(width=600, height=400))
gvisGeoChart(Exports, locationvar = "Country", colorvar = "Profit", options = list(width=600, height=400))
Exports
dir()
runApp("mixingShinyGoogleVis")
runApp("mixingShinyGoogleVis", display.mode = "showcase")
runApp("mixingShinyGoogleVis", display.mode = "showcase")
runApp("mixingShinyGoogleVis", display.mode = "showcase")
?renderGvis
runApp("mixingShinyGoogleVis", display.mode = "showcase")
runApp("mixingShinyGoogleVis", display.mode = "showcase")
runApp("mixingShinyGoogleVis", display.mode = "showcase")
runApp("mixingShinyGoogleVis", display.mode = "showcase")
runApp("mixingShinyGoogleVis", display.mode = "showcase")
