install.packages("plyr")
data(iris)
funcD1 <- function(dtChunk){
result <- mean(dtIris$Sepal.Length)
return(result)
}
dlply(.data = iris, .variables = "Species", .fun = funcD1)
library(plyr)
dlply(.data = iris, .variables = "Species", .fun = funcD1)
funcD1 <- function(dtChunk){
result <- mean(Iris$Sepal.Length)
return(result)
}
library(plyr)
dlply(.data = iris, .variables = "Species", .fun = funcD1)
iris
funcD1 <- function(dtChunk){
result <- mean(iris$Sepal.Length)
return(result)
}
library(plyr)
dlply(.data = iris, .variables = "Species", .fun = funcD1)
install.packages("data.table")
?chron
vingette(chron)
vignette(chron)
help("titanic)
help("titanic")
help("Titanic")
class(Titanic)
Titanic
dfTitanic <- data.frame(Titanic)
str(dfTitanic)
dtSurvived <- dtTitanic[, list(n=sum(Freq)), by="Survived"]
dfSurvived <- dtTitanic[, list(n=sum(Freq)), by="Survived"]
dtSurvived <- dfTitanic[, list(n=sum(Freq)), by="Survived"]
library(data.table)
dtTitanic = data.table(dfTitanic)
dtSurvived <- dfTitanic[, list(n=sum(Freq)), by="Survived"]
dtSurvived <- dtTitanic[, list(n=sum(Freq)), by="Survived"]
vector.height = dtSurvived[, n]
vector.Names = dtSurvived[, Survived]
dtSurvived
barplot(height = vector.height, names.arg = vector.Names)
dtSurvived[, percentage := n/sum(n)]
dtSurvived[, colorPlot := ifelse(Survived == 'Yes', 'blue', 'red')]
barplot(height = dtSurvived[, percentage], names.arg = dtSurvived[,Survived], col= dtSurvived[, colorPlot], ylim= c(0,1))
e
ln
exp(1)
plot(exp(1)^(-1/x))
x = 0:36
plot(exp(1)^(-1/x))
plot(exp(1)^(-1/x), type = 'l')
plot(exp(1)^(-1/x) - 1, type = 'l')
plot((exp(1)^(-1/x) -1) , type = 'l')
plot((exp(1)^(-1/x)-) , type = 'l', ylim = c(0, 1))
plot( (exp(1)^(-1/x)-1) , type = 'l', ylim = c(0, 1) )
plot( (exp(1)^(-1/x)-.5) , type = 'l', ylim = c(0, 1) )
plot( (exp(2)^(-1/x)-) , type = 'l', ylim = c(0, 1) )
plot( (exp(2)^(-1/x)) , type = 'l', ylim = c(0, 1) )
plot( (exp(3)^(-1/x)) , type = 'l', ylim = c(0, 1) )
plot( (exp(3)^(-1/(x - 1))) , type = 'l', ylim = c(0, 1) )
plot( (exp(3)^(-1/x)) , type = 'l', ylim = c(0, 1) )
plot( (exp(5)^(-1/x) -.6) , type = 'l', ylim = c(0, 1) )
plot( (exp(5)^(-1/x) -.65) , type = 'l', ylim = c(0, 1) )
plot( (exp(5)^(-1/x) -.62) , type = 'l', ylim = c(0, 1) )
plot( (exp(5)^(-1/x) -.63) , type = 'l', ylim = c(0, 1) )
plot( (exp(5)^(-1/x) -.61) , type = 'l', ylim = c(0, 1) )
plot( (exp(3)^(-1/x) -.61) , type = 'l', ylim = c(0, 1) )
plot( (exp(3)^(-1/2x) -.61) , type = 'l', ylim = c(0, 1) )
plot( (exp(3)^(-1/(2x)) -.61) , type = 'l', ylim = c(0, 1) )
plot( (exp(3)^(-1/(2x)) -.61) , type = 'l', ylim = c(0, 1) )
plot( (exp(3)^( -1/(x) ) -.61) , type = 'l', ylim = c(0, 1) )
plot( (exp(3)^( -1/(2*x) ) -.61) , type = 'l', ylim = c(0, 1) )
plot( (exp(3)^( -1/(3*x) ) -.61) , type = 'l', ylim = c(0, 1) )
plot( (exp(3)^( -1/(.5*x) ) -.61) , type = 'l', ylim = c(0, 1) )
plot(x^3 +x +1, type = 'l')
plot(x^3 -x +1, type = 'l')
plot(x^5 -x +1, type = 'l')
plot(x^5 -x +1, type = 'l')
plot(x^7 -x +1, type = 'l')
plot(x^3 -7*x +1, type = 'l')
plot(-x^3 -7*x +1, type = 'l')
plot((x-2)^3 -7*x +1, type = 'l')
plot((x-2)^3 -15*x +1, type = 'l')
plot((x+2)^3 -7*x +1, type = 'l')
plot((x+.2)^3 .1*x .1, type = 'l')
plot((x+.2)^3 .1*x + .1, type = 'l')
plot((x + .2)^3 + .1*x + .1, type = 'l')
plot(x^3)
plot(x^2)
plot(x^17)
plot(x^.17)
plot(x^.05)
plot(x^.5)
plot(x^2 + 5x + 5)
plot(x^2 + 5*x + 5)
plot(x^2 - 5*x + 5)
plot(-x^2 - 5*x + 5)
plot((x-1)^2 - 5*x + 5)
plot((x-7)^2 - 5*x + 5)
plot((x-7)^2 - 15*x + 5)
plot((x-5)^3 - 15*x + 5)
plot((x-5)^3 - 5*x + 5)
plot((x-20)^3 - 5*x + 5)
plot((x-100)^3 - 5*x + 5)
plot((x-309)^3 - 5*x + 5)
plot((x-30)^3 - 5*x + 5)
plot((x-5)^3 - 5*x + 5)
plot((x-7)^3 - 5*x + 5)
plot((x-7)^5 - 5*x + 5)
plot((x-7)^3 - 5*x + 5)
plot((x-7)^3 - 15*x + 5)
plot((x-7)^3 - 15*x + 20)
plot((x-7)^3 - 15*x + 1)
plot((x-9)^3 - 15*x + 1)
plot((x-9)^3 - 5*x + 1)
plot((x-9)^3 - 5*x + 1)
plot((x-13)^3 - 5*x + 1)
plot((x-14)^3 - 5*x + 1)
plot((x-15)^3 - 5*x + 1)
plot((x-15)^3 - 6*x + 1)
plot((x-15)^3 - 2*x + 1)
plot((x-15)^3 + 1)
plot((x-17)^3 + 1)
plot((x-.17)^3 + .11)
plot((x-.17)^3 + .1)
plot((x-.57)^3 + .1)
plot((x-1)^3 + .1)
plot((x-3)^3 + .1)
plot((x-7)^3 + .1)
plot((x-11)^3 + .1)
plot((x-15)^3 + .1)
tempFrame
if(tempFile)
if(tempFile) print("derp")
is.name(tempFile)
is.environment(tempFile)
is.environment(tempFrame)
tempFrame = NA
if(tempFrame)
print("derp")
?cbind
40000/12
*.84
3333.333 *.84
Results = list("Date" = Sys.Date())
file.dir  <- "./data"
completePath <- paste(file.dir, "/data.zip", sep = "")
## Test file locations
testDataFile = "data/UCI HAR Dataset/test/X_test.txt"
testActivityFile = "data/UCI HAR Dataset/test/y_test.txt"
testSubjectFile = "data/UCI HAR Dataset/test/subject_test.txt"
## Train file locations
trainDataFile = "data/UCI HAR Dataset/train/X_train.txt"
trainActivityFile = "data/UCI HAR Dataset/train/y_train.txt"
trainSubjectFile = "data/UCI HAR Dataset/train/subject_train.txt"
# filtering files based on these attributes
patternList <- c("body_acc_x", "body_acc_y", "body_acc_z", "body_gyro_x", "body_gyro_y", "body_gyro_z",
"total_acc_x", "total_acc_y", "total_acc_z")
# Fixed names for finalized List of extra data
sublistNames = c("BodyAccX", "BodyAccY", "BodyAccZ",
"BodyGyroX", "BodyGyroY", "BodyGyroZ",
"TotalAccX", "TotalAccY", "TotalAccZ")
# Functions|
#-----------
# -> Reads file, then returns as data frame
readFileData <- function(targetFile){
fwfPattern <- rep(c(-2, 14), times = 128)
df = read.fwf(targetFile, fwfPattern)
return(df)
}
####
# -> Read Single Column data,
readSingleColumn <- function(targetFile){
return(read.fwf(targetFile, c(1)))
}
####
# -> Returns the indexes of the matching files from both folders
returnIndexes <- function(){
df = data.frame()
for(pattern in patternList){
df <- rbind(df, grep(pattern, files.list))
}
return(df)
}
####
# -> Collect Data, bind on column per subject, and then return the data frame.
mergeDataFiles <- function(dataFile, activityFile, subjectFile){
activityData = readSingleColumn(activityFile)
colnames(activityData) <- "activity"
activityData$activity <- factor(activityData$activity, levels = c(1,2,3,4,5,6),
labels = c("walking", "WalkingUpstairs", "walkingDownstairs", "sitting", "standing", "laying"))
subjectData = readSingleColumn(subjectFile)
colnames(subjectData) <- "subject"
data = readFileData(dataFile)
return(cbind(subjectData, activityData, data))
}
####
# -> Collect information from the other folders that
# -> Are not needed for the assignment but I did anyways
compileExtraData <- function(){
# since the file list is sorted alphabetically by default,
# I don't have to worry about ordering it.
Test = list()
Train = list()
for(n in 1:nrow(indexCollection)){
# read data
testTemp  = readFileData( files.list[indexCollection[n,1]] )
trainTemp = readFileData( files.list[indexCollection[n,2]] )
# assign data
Test[sublistNames[n]] = testTemp
Train[sublistNames[n]] = trainTemp
}
Results$Test  = Test
Results$Train = Train
}
# This can be used for both the mean or the standard dev.
complileStat <- function(data, statFunc){
return(sapply(data, statFunc))
}
files.list <- list.files(recursive = TRUE)
setwd("C:\\Users\\mitcolli\\Documents\\Docs\\code\\Coursera\\DataSpec\\CleaningData\\Project")
files.list <- list.files(recursive = TRUE)
files.list
list.files()
setwd("C:\\Users\\mitcolli\\Documents\\Docs\\code\\Documentation\\rProgramming\\rMachineLearning\\MLWithR\\c04")
sms_raw <- read.csv("sms_spam.csv", stringsAsFactors = FALSE)
str(sms_raw)
sms_raw$type = factor(sms_raw$type)
table(sms_raw$type)
install.packages("tm")
library(tm)
sms_corpus = Corpus(VectorSource(sms_raw$text))
sms_corpus = Corpus(VectorSource(sms_raw$text))
rm(list() = ls)
rm(list() = ls())
rm(list(ls())
)
rm(list = ls())
library(tm)
sms_raw <- read.csv("sms_spam.csv", stringsAsFactors = FALSE)
sms_raw$type = factor(sms_raw$type)
sms_corpus = Corpus(VectorSource(sms_raw$text))
