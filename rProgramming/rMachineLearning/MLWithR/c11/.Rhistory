install.packages("plyr")
data(iris)
funcD1 <- function(dtChunk){
result <- mean(dtIris$Sepal.Length)
return(result)
}
dlply(.data = iris, .variables = "Species", .fun = funcD1)
library(plyr)
dlply(.data = iris, .variables = "Species", .fun = funcD1)
funcD1 <- function(dtChunk){
result <- mean(Iris$Sepal.Length)
return(result)
}
library(plyr)
dlply(.data = iris, .variables = "Species", .fun = funcD1)
iris
funcD1 <- function(dtChunk){
result <- mean(iris$Sepal.Length)
return(result)
}
library(plyr)
dlply(.data = iris, .variables = "Species", .fun = funcD1)
install.packages("data.table")
?chron
vingette(chron)
vignette(chron)
help("titanic)
help("titanic")
help("Titanic")
class(Titanic)
Titanic
dfTitanic <- data.frame(Titanic)
str(dfTitanic)
dtSurvived <- dtTitanic[, list(n=sum(Freq)), by="Survived"]
dfSurvived <- dtTitanic[, list(n=sum(Freq)), by="Survived"]
dtSurvived <- dfTitanic[, list(n=sum(Freq)), by="Survived"]
library(data.table)
dtTitanic = data.table(dfTitanic)
dtSurvived <- dfTitanic[, list(n=sum(Freq)), by="Survived"]
dtSurvived <- dtTitanic[, list(n=sum(Freq)), by="Survived"]
vector.height = dtSurvived[, n]
vector.Names = dtSurvived[, Survived]
dtSurvived
barplot(height = vector.height, names.arg = vector.Names)
dtSurvived[, percentage := n/sum(n)]
dtSurvived[, colorPlot := ifelse(Survived == 'Yes', 'blue', 'red')]
barplot(height = dtSurvived[, percentage], names.arg = dtSurvived[,Survived], col= dtSurvived[, colorPlot], ylim= c(0,1))
e
ln
exp(1)
plot(exp(1)^(-1/x))
x = 0:36
plot(exp(1)^(-1/x))
plot(exp(1)^(-1/x), type = 'l')
plot(exp(1)^(-1/x) - 1, type = 'l')
plot((exp(1)^(-1/x) -1) , type = 'l')
plot((exp(1)^(-1/x)-) , type = 'l', ylim = c(0, 1))
plot( (exp(1)^(-1/x)-1) , type = 'l', ylim = c(0, 1) )
plot( (exp(1)^(-1/x)-.5) , type = 'l', ylim = c(0, 1) )
plot( (exp(2)^(-1/x)-) , type = 'l', ylim = c(0, 1) )
plot( (exp(2)^(-1/x)) , type = 'l', ylim = c(0, 1) )
plot( (exp(3)^(-1/x)) , type = 'l', ylim = c(0, 1) )
plot( (exp(3)^(-1/(x - 1))) , type = 'l', ylim = c(0, 1) )
plot( (exp(3)^(-1/x)) , type = 'l', ylim = c(0, 1) )
plot( (exp(5)^(-1/x) -.6) , type = 'l', ylim = c(0, 1) )
plot( (exp(5)^(-1/x) -.65) , type = 'l', ylim = c(0, 1) )
plot( (exp(5)^(-1/x) -.62) , type = 'l', ylim = c(0, 1) )
plot( (exp(5)^(-1/x) -.63) , type = 'l', ylim = c(0, 1) )
plot( (exp(5)^(-1/x) -.61) , type = 'l', ylim = c(0, 1) )
plot( (exp(3)^(-1/x) -.61) , type = 'l', ylim = c(0, 1) )
plot( (exp(3)^(-1/2x) -.61) , type = 'l', ylim = c(0, 1) )
plot( (exp(3)^(-1/(2x)) -.61) , type = 'l', ylim = c(0, 1) )
plot( (exp(3)^(-1/(2x)) -.61) , type = 'l', ylim = c(0, 1) )
plot( (exp(3)^( -1/(x) ) -.61) , type = 'l', ylim = c(0, 1) )
plot( (exp(3)^( -1/(2*x) ) -.61) , type = 'l', ylim = c(0, 1) )
plot( (exp(3)^( -1/(3*x) ) -.61) , type = 'l', ylim = c(0, 1) )
plot( (exp(3)^( -1/(.5*x) ) -.61) , type = 'l', ylim = c(0, 1) )
plot(x^3 +x +1, type = 'l')
plot(x^3 -x +1, type = 'l')
plot(x^5 -x +1, type = 'l')
plot(x^5 -x +1, type = 'l')
plot(x^7 -x +1, type = 'l')
plot(x^3 -7*x +1, type = 'l')
plot(-x^3 -7*x +1, type = 'l')
plot((x-2)^3 -7*x +1, type = 'l')
plot((x-2)^3 -15*x +1, type = 'l')
plot((x+2)^3 -7*x +1, type = 'l')
plot((x+.2)^3 .1*x .1, type = 'l')
plot((x+.2)^3 .1*x + .1, type = 'l')
plot((x + .2)^3 + .1*x + .1, type = 'l')
plot(x^3)
plot(x^2)
plot(x^17)
plot(x^.17)
plot(x^.05)
plot(x^.5)
plot(x^2 + 5x + 5)
plot(x^2 + 5*x + 5)
plot(x^2 - 5*x + 5)
plot(-x^2 - 5*x + 5)
plot((x-1)^2 - 5*x + 5)
plot((x-7)^2 - 5*x + 5)
plot((x-7)^2 - 15*x + 5)
plot((x-5)^3 - 15*x + 5)
plot((x-5)^3 - 5*x + 5)
plot((x-20)^3 - 5*x + 5)
plot((x-100)^3 - 5*x + 5)
plot((x-309)^3 - 5*x + 5)
plot((x-30)^3 - 5*x + 5)
plot((x-5)^3 - 5*x + 5)
plot((x-7)^3 - 5*x + 5)
plot((x-7)^5 - 5*x + 5)
plot((x-7)^3 - 5*x + 5)
plot((x-7)^3 - 15*x + 5)
plot((x-7)^3 - 15*x + 20)
plot((x-7)^3 - 15*x + 1)
plot((x-9)^3 - 15*x + 1)
plot((x-9)^3 - 5*x + 1)
plot((x-9)^3 - 5*x + 1)
plot((x-13)^3 - 5*x + 1)
plot((x-14)^3 - 5*x + 1)
plot((x-15)^3 - 5*x + 1)
plot((x-15)^3 - 6*x + 1)
plot((x-15)^3 - 2*x + 1)
plot((x-15)^3 + 1)
plot((x-17)^3 + 1)
plot((x-.17)^3 + .11)
plot((x-.17)^3 + .1)
plot((x-.57)^3 + .1)
plot((x-1)^3 + .1)
plot((x-3)^3 + .1)
plot((x-7)^3 + .1)
plot((x-11)^3 + .1)
plot((x-15)^3 + .1)
tempFrame
if(tempFile)
if(tempFile) print("derp")
is.name(tempFile)
is.environment(tempFile)
is.environment(tempFrame)
tempFrame = NA
if(tempFrame)
print("derp")
?cbind
?save
install.packages("caret")
library(caret)
install.packages("kernlab")
library(kernlab)
createDataPartition()
createDataPartition
?any
data = read.csv("C:\\Users\\mitcolli\\Downloads\\storage\\code\\chapter 5")
data = read.csv("C:\\Users\\mitcolli\\Downloads\\storage\\code\\chapter 5\mushrooms.csv")
data = read.csv("C:\\Users\\mitcolli\\Downloads\\storage\\code\\chapter 5\\mushrooms.csv")
data = read.csv("C:\\Users\\mitcolli\\Downloads\\storage\\code\\chapter 5\\mushrooms.csv". stringsAsFactors = TRUE)
data = read.csv("C:\\Users\\mitcolli\\Downloads\\storage\\code\\chapter 5\\mushrooms.csv", stringsAsFactors = TRUE)
str(data)
data$veil_type <- NULL
table(mushrooms$type)
table(data$type)
install.packages("RWeka")
library(RWeka)
?formula
formula
namespace
?namespace
data_1R <- oneR(type ~ ., data = data)
data_1R <- OneR(type ~ ., data = data)
data_1R
names(data_1R)
data_1R$call
type(data_1R)
class(data_1R)
data_1R$classifier
data_1R$levels
data_1R$terms
?attr
?object
?Jrip
?JRip
print(z)
data_JRip <- JRip(type ~ ., data = data)
data_JRip
install.packages("vcd")
library("vcd")
setwd("C:\\Users\\mitcolli\\Documents\\Docs\\code\\Documentation\\rProgramming\\rMachineLearning\\MLWithR\\c10")
#-----------------------------------------------------------------
# This are my personal notes about the Text "Machine Learning with R"
# by Brett Lantz. I'll be splitting up the notes by chapters.
#-------------------------
# Quick Notes:
##- C10
##- Confusion Matrix
##- VCD
#----------
# Chapter 10
sms_results <- read.csv("sms_results.csv")
head(sms_results)
# Accuracy:
#         True Positive + True Negative
#  Acc = ------------------------------
#                  Total
# Error Rate = 1 - Acc
# Create Confusion Matrix
table(sms_results$actual_type, sms_results$predict_type)
#install.packages("gmodels")
library(gmodels)
# use awesome CrossTable
CrossTable(sms_results$actual_type, sms_results$predict_type)
#install.packages("caret")
library(caret)
confusionMatrix(sms_results$predict_type, sms_results$actual_type, positive = "spam")
# install.packages("vcd")
library("vcd")
# Kappa(table(sms_results$actual_))
Kappa(table(sms_results$actual_type, sms_results$predict_type))
install.packages("irr")
library(irr)
?kappa2
kappa2(sms_results[1:2]))
kappa2(sms_results[1:2])
sens <- 154 / (154 + 29)
spec <- 1202 / (1202 + 5)
sens
spec
library(care)
library(caret)
sensitivity(sms_results$predict_type, sms_results$actual_type, positive = "spam")
specificity(sms_results$predict_type, sms_results$actual_type, negative = "ham")
install.packages("ROCR")
library(ROCR)
pred <- prediction(predictions = sms_results$prob_spam, labels = sms_results$actual_type)
perf <- perormance(pred, measure = "tpr", x.measure = "fpr")
perf <- performance(pred, measure = "tpr", x.measure = "fpr")
plot(perf, main = "ROC curve for SMS spam filter", col = "blue", lwd = 3)
abline(a = 0, b = 1, lwd = 2, lty = 2)
perf.auc <- performance(pred, measure = "auc")
str(perf.auc)
?s4
unlist(perf.auc@y.values)
perf.auc@y.values
credit <- read.csv("credit.csv")
library(C50)
install.packages(c50)
library(C50)
install.packages("C50")
library(C50)
set.seed(123)
folds <- createFolds(credit$default, k = 10)
folds
folds$Fold01
cv_results <- lapply(folds, function(x){
credit_train  <- credit[x, ]
credit_test   <- credit[-x, ]
credit_model  <- C5.0(defualt ~ ., data = credit_train)
credit_pred   <- predict(credit_model, credit_test)
credit_actual <- credit_test$default
kappa <- kappa2(data.frame(credit_actual, credit_pred))$value
return(kappa)
})
cv_results <- lapply(folds, function(x){
credit_train  <- credit[x, ]
credit_test   <- credit[-x, ]
credit_model  <- C5.0(default ~ ., data = credit_train)
credit_pred   <- predict(credit_model, credit_test)
credit_actual <- credit_test$default
kappa <- kappa2(data.frame(credit_actual, credit_pred))$value
return(kappa)
})
str(cv_results)
mean(unlist(cv_results))
setwd("C:\\Users\\mitcolli\\Documents\\Docs\\code\\Documentation\\rProgramming\\rMachineLearning\\MLWithR\\c11")
m <- train(defualt ~., data = credit, method = "C5.0")
m <- train(default ~., data = credit, method = "C5.0")
warnings()
860.95 / 59.05
14.55 * 80
(14.55 * 80) - 13.55 * 80
14.55 * 1.5
(14.55 * 80) + 14.55 * 1.5 * 10
((14.55 * 80) + 14.55 * 1.5 * 10) * .7
(((14.55 * 80) + 14.55 * 1.5 * 10) * .7) * 2 + 400
m
p <- predict(m, credit)
table(p, credit$default)
?trainControl
SutherlandPaycheck = 14.55 * 80
SutherlandOvertime = 14.55 * 1.5
SutherlandPayment  = SutherlandOvertime * 10
SutherlandPayment  = SutherlandOvertime * 15
TopsPayment = 400
MONTH = 4
YEAR = 12
SutherlandYEar = ((SutherlandPaycheck + SutherlandPayment) * MONTH) * YEAR
SutherlandYEar
SutherlandPaycheck
SutherlandPayment
SutherlandOvertimePayment  = SutherlandOvertime * 15
SutherlandYEar = ((SutherlandPaycheck + SutherlandOvertimePayment) * MONTH) * YEAR
SutherlandYear = ((SutherlandPaycheck + SutherlandOvertimePayment) * MONTH) * YEAR
(SutherlandPaycheck + SutherlandOvertimePayment) * MONTH)
((SutherlandPaycheck + SutherlandOvertimePayment) * MONTH)
((SutherlandPaycheck + SutherlandOvertimePayment) * MONTH) * YEAR
TAXRATE = .7
SutherlandYear = ((SutherlandPaycheck + SutherlandOvertimePayment) * MONTH) * YEAR * TAXRATE
SutherlandYear
SutherlandYear = ((SutherlandPaycheck + SutherlandOvertimePayment) * MONTH/2) * YEAR * TAXRATE
SutherlandYear
TAXRATE = .75
SutherlandYear = ((SutherlandPaycheck + SutherlandOvertimePayment) * MONTH/2) * YEAR * TAXRATE
TAXRATE = .75
SutherlandYear
TopsYear = TopsPayment * YEAR
TopsYear
TotalYear = TopsYear + SutherlandYear
TopsYear = TopsPayment * YEAR * TAXRATE
TotalYear = TopsYear + SutherlandYear
TotalYear
SutherlandYear = ((SutherlandPaycheck + SutherlandOvertimePayment) * (MONTH/2)) * YEAR * TAXRATE
TotalYear = TopsYear + SutherlandYear
TotalYear
SutherlandYEar
SutherlandYear
(SutherlandPaycheck + SutherlandOvertimePayment) * (MONTH/2)
((SutherlandPaycheck + SutherlandOvertimePayment) * (MONTH/2)) * YEAR
TAXRATE = .75
((SutherlandPaycheck + SutherlandOvertimePayment) * (MONTH/2)) * YEAR * TAXRATE
TAXRATE = .8
((SutherlandPaycheck + SutherlandOvertimePayment) * (MONTH/2)) * YEAR * TAXRATE
SutherlandYear = ((SutherlandPaycheck + SutherlandOvertimePayment) * (MONTH/2)) * YEAR * TAXRATE
TopsPayment = 400
TopsYear = TopsPayment * YEAR * TAXRATE
TotalYear = TopsYear + SutherlandYear
TotalYear
(SutherlandPaycheck + SutherlandOvertimePayment) * (MONTH/2)
2982.75 * .8
TopsYear = TopsPayment * YEAR
TotalYear = TopsYear + SutherlandYear
TotalYear
TAXRATE = .85
SutherlandYear = ((SutherlandPaycheck + SutherlandOvertimePayment) * (MONTH/2)) * YEAR * TAXRATE
TotalYear = TopsYear + SutherlandYear
TotalYear
install.packages("ipred")
library(ipred)
set.seed(300)
mybag = bagging(default~., data = credit, nbagg = 25)
cred_predict <- predict(mybag, credit)
table(cred_predict, credit$default)
set.seed(300)
ctrl <- trainControl(method = "cv", number = 10)
train(default~., data = credit, method = "treebag", trControl = ctrl)
bagctrl <- bagControl(fit = svmBag$fit, predict = svmBag$pred, aggregate = svmBag$aggregate)
set.seed(300)
svmBag <- train(default~., data = credit, "bag", trControl = ctrl, bagControl = bagctrl)
