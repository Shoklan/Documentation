install.packages("plyr")
data(iris)
funcD1 <- function(dtChunk){
result <- mean(dtIris$Sepal.Length)
return(result)
}
dlply(.data = iris, .variables = "Species", .fun = funcD1)
library(plyr)
dlply(.data = iris, .variables = "Species", .fun = funcD1)
funcD1 <- function(dtChunk){
result <- mean(Iris$Sepal.Length)
return(result)
}
library(plyr)
dlply(.data = iris, .variables = "Species", .fun = funcD1)
iris
funcD1 <- function(dtChunk){
result <- mean(iris$Sepal.Length)
return(result)
}
library(plyr)
dlply(.data = iris, .variables = "Species", .fun = funcD1)
install.packages("data.table")
?chron
vingette(chron)
vignette(chron)
help("titanic)
help("titanic")
help("Titanic")
class(Titanic)
Titanic
dfTitanic <- data.frame(Titanic)
str(dfTitanic)
dtSurvived <- dtTitanic[, list(n=sum(Freq)), by="Survived"]
dfSurvived <- dtTitanic[, list(n=sum(Freq)), by="Survived"]
dtSurvived <- dfTitanic[, list(n=sum(Freq)), by="Survived"]
library(data.table)
dtTitanic = data.table(dfTitanic)
dtSurvived <- dfTitanic[, list(n=sum(Freq)), by="Survived"]
dtSurvived <- dtTitanic[, list(n=sum(Freq)), by="Survived"]
vector.height = dtSurvived[, n]
vector.Names = dtSurvived[, Survived]
dtSurvived
barplot(height = vector.height, names.arg = vector.Names)
dtSurvived[, percentage := n/sum(n)]
dtSurvived[, colorPlot := ifelse(Survived == 'Yes', 'blue', 'red')]
barplot(height = dtSurvived[, percentage], names.arg = dtSurvived[,Survived], col= dtSurvived[, colorPlot], ylim= c(0,1))
e
ln
exp(1)
plot(exp(1)^(-1/x))
x = 0:36
plot(exp(1)^(-1/x))
plot(exp(1)^(-1/x), type = 'l')
plot(exp(1)^(-1/x) - 1, type = 'l')
plot((exp(1)^(-1/x) -1) , type = 'l')
plot((exp(1)^(-1/x)-) , type = 'l', ylim = c(0, 1))
plot( (exp(1)^(-1/x)-1) , type = 'l', ylim = c(0, 1) )
plot( (exp(1)^(-1/x)-.5) , type = 'l', ylim = c(0, 1) )
plot( (exp(2)^(-1/x)-) , type = 'l', ylim = c(0, 1) )
plot( (exp(2)^(-1/x)) , type = 'l', ylim = c(0, 1) )
plot( (exp(3)^(-1/x)) , type = 'l', ylim = c(0, 1) )
plot( (exp(3)^(-1/(x - 1))) , type = 'l', ylim = c(0, 1) )
plot( (exp(3)^(-1/x)) , type = 'l', ylim = c(0, 1) )
plot( (exp(5)^(-1/x) -.6) , type = 'l', ylim = c(0, 1) )
plot( (exp(5)^(-1/x) -.65) , type = 'l', ylim = c(0, 1) )
plot( (exp(5)^(-1/x) -.62) , type = 'l', ylim = c(0, 1) )
plot( (exp(5)^(-1/x) -.63) , type = 'l', ylim = c(0, 1) )
plot( (exp(5)^(-1/x) -.61) , type = 'l', ylim = c(0, 1) )
plot( (exp(3)^(-1/x) -.61) , type = 'l', ylim = c(0, 1) )
plot( (exp(3)^(-1/2x) -.61) , type = 'l', ylim = c(0, 1) )
plot( (exp(3)^(-1/(2x)) -.61) , type = 'l', ylim = c(0, 1) )
plot( (exp(3)^(-1/(2x)) -.61) , type = 'l', ylim = c(0, 1) )
plot( (exp(3)^( -1/(x) ) -.61) , type = 'l', ylim = c(0, 1) )
plot( (exp(3)^( -1/(2*x) ) -.61) , type = 'l', ylim = c(0, 1) )
plot( (exp(3)^( -1/(3*x) ) -.61) , type = 'l', ylim = c(0, 1) )
plot( (exp(3)^( -1/(.5*x) ) -.61) , type = 'l', ylim = c(0, 1) )
plot(x^3 +x +1, type = 'l')
plot(x^3 -x +1, type = 'l')
plot(x^5 -x +1, type = 'l')
plot(x^5 -x +1, type = 'l')
plot(x^7 -x +1, type = 'l')
plot(x^3 -7*x +1, type = 'l')
plot(-x^3 -7*x +1, type = 'l')
plot((x-2)^3 -7*x +1, type = 'l')
plot((x-2)^3 -15*x +1, type = 'l')
plot((x+2)^3 -7*x +1, type = 'l')
plot((x+.2)^3 .1*x .1, type = 'l')
plot((x+.2)^3 .1*x + .1, type = 'l')
plot((x + .2)^3 + .1*x + .1, type = 'l')
plot(x^3)
plot(x^2)
plot(x^17)
plot(x^.17)
plot(x^.05)
plot(x^.5)
plot(x^2 + 5x + 5)
plot(x^2 + 5*x + 5)
plot(x^2 - 5*x + 5)
plot(-x^2 - 5*x + 5)
plot((x-1)^2 - 5*x + 5)
plot((x-7)^2 - 5*x + 5)
plot((x-7)^2 - 15*x + 5)
plot((x-5)^3 - 15*x + 5)
plot((x-5)^3 - 5*x + 5)
plot((x-20)^3 - 5*x + 5)
plot((x-100)^3 - 5*x + 5)
plot((x-309)^3 - 5*x + 5)
plot((x-30)^3 - 5*x + 5)
plot((x-5)^3 - 5*x + 5)
plot((x-7)^3 - 5*x + 5)
plot((x-7)^5 - 5*x + 5)
plot((x-7)^3 - 5*x + 5)
plot((x-7)^3 - 15*x + 5)
plot((x-7)^3 - 15*x + 20)
plot((x-7)^3 - 15*x + 1)
plot((x-9)^3 - 15*x + 1)
plot((x-9)^3 - 5*x + 1)
plot((x-9)^3 - 5*x + 1)
plot((x-13)^3 - 5*x + 1)
plot((x-14)^3 - 5*x + 1)
plot((x-15)^3 - 5*x + 1)
plot((x-15)^3 - 6*x + 1)
plot((x-15)^3 - 2*x + 1)
plot((x-15)^3 + 1)
plot((x-17)^3 + 1)
plot((x-.17)^3 + .11)
plot((x-.17)^3 + .1)
plot((x-.57)^3 + .1)
plot((x-1)^3 + .1)
plot((x-3)^3 + .1)
plot((x-7)^3 + .1)
plot((x-11)^3 + .1)
plot((x-15)^3 + .1)
tempFrame
if(tempFile)
if(tempFile) print("derp")
is.name(tempFile)
is.environment(tempFile)
is.environment(tempFrame)
tempFrame = NA
if(tempFrame)
print("derp")
?cbind
Results = list("Date" = Sys.Date())
timestamp <- Sys.Date()
dataUrl   <- "https://d396qusza40orc.cloudfront.net/getdata%2Fprojectfiles%2FUCI%20HAR%20Dataset.zip"
file.dir  <- "./data"
completePath <- paste(file.dir, "/data.zip", sep = "")
patternList <- c("body_acc_x", "body_acc_y", "body_acc_z", "body_gyro_x", "body_gyro_y", "body_gyro_z",
"total_acc_x", "total_acc_y", "total_acc_z")
###---------
# Functions|
#-----------
# -> Reads file, then returns as data frame
readFileData <- function(targetFile){
fwfPattern <- rep(c(-2, 14), times = 128)
df = read.fwf(targetFile, fwfPattern)
return(df)
}
####
# -> Read Single Column data,
readSingleColumn <- function(targetFile){
return(read.fwf(targetFile, c(1)))
}
####
# -> Returns the indexes of the matching files from both folders
returnIndexes <- function(){
indexes = data.frame()
for(pattern in patternList){
indexes <- rbind(indexes, grep(pattern, files.list))
}
print(indexes)
}
#### DELETE
# -> pull out unique file endings
#getUniqueList <- function(){
#  uniqueList <- vector()
#  for(counter in 1:length(files)){
#    if(!is.na(files[[counter]][5]))
#      uniqueList <- c(uniqueList, unique(files[[counter]][5]))
#  }
#  return(uniqueList)
#
####
# -> Collect Data, bind on column per subject, and then return the data frame.
mergeDataFiles <- function(dataFile, activityFile, subjectFile){
activityData = readSingleColumn(activityFile)
colnames(activityData) <- "activity"
activityData$activity <- factor(activityData$activity, levels = c(1,2,3,4,5,6),
labels = c("walking", "WalkingUpstairs", "walkingDownstairs", "sitting", "standing", "laying"))
subjectData = readSingleColumn(subjectFile)
colnames(subjectData) <- "subject"
data = readFileData(dataFile)
return(cbind(subjectData, activityData, data))
}
files.list <- list.files(recursive = TRUE)
setwed("C:\\Users\\mitcolli\\Documents\\Docs\\code\\Coursera\\DataSpec\\CleaningData\\Project")
setwd("C:\\Users\\mitcolli\\Documents\\Docs\\code\\Coursera\\DataSpec\\CleaningData\\Project")
files.list <- list.files(recursive = TRUE)
files <- strsplit(files.list, split = "/")
testDataFile = "data/UCI HAR Dataset/test/X_test.txt"
testActivityFile = "data/UCI HAR Dataset/test/y_test.txt"
testSubjectFile = "data/UCI HAR Dataset/test/subject_test.txt"
trainDataFile = "data/UCI HAR Dataset/train/X_train.txt"
trainActivityFile = "data/UCI HAR Dataset/train/y_train.txt"
trainSubjectFile = "data/UCI HAR Dataset/train/subject_train.txt"
for(item in files.list){ value = strsplit(item, '/'); print(value[length(value)])}
files
unlist(value)
strplit(files.list)
strsplit(files.list)
strsplit(files.list, '/')
unlist(strsplit(files.list, '/'))
value = strsplit(files.list, '/')
value
for(n in 1:length(value)) print(value[[n]][1])
for(n in 1:length(value)) print(value[[n]][2])
for(n in 1:length(value)) print(value[[n]][3])
for(n in 1:length(value)) print(value[[n]][4])
?lapply()
print("/derp")
print("/derp"[2:5])
?sub()
?strsplit()
as.symbol(paste(value))
as.symbol(paste("Results", "$", "1"))
as.symbol(paste("Results", "$", "1", sep = ""))
as.symbol(paste("Results", "$", "Date", sep = ""))
as.symbol(paste("Results", "$", "Date", collapse = ""))
as.symbol(paste("Results", "$", "Date", sep = ""))
paste("Results", "$", "Date", sep = "")
paste(Results, $, Date, sep = "")
paste(Results, "$", Date, sep = "")
paste(Results, "$", "Date", sep = "")
paste("Results", "$", "Date", sep = "")
print("Results", "$", "Date", sep = "")
lapply(Results, [4])
lapply(Results, function(x) x[[1]][])
lapply(value, function(x) x[[1]][])
lapply(value, function(x) x[[1]][4])
lapply(value, function(x) x[[1]][3])
lapply(value, function(x) x[[1]][1])
lapply(value, function(x) x[[1]][2])
value
lapply(value, function(x) x[[4]])
value$5
value
value$`31`
value$`1`
length(value[[1]])
length(value[[2]])
nrow(indexCollection)
indexCollection = data.frame()
for(pattern in patternList){
indexCollection <- rbind(indexCollection, grep(pattern, files.list))
}
nrow(indexCollection)
?gsub()
value
listLast <- function(aList){}
listLast <- function(aList){
print(length(aList))
}
lapply(value, listLast)
listLast <- function(aList){
limit = length(aList)
return(aList[limit])
}
lapply(value, listLast)
sapply(value, listLast)
indexCollection
file.names = sapply(value, listLast)
sublistNames = c("BodyAccX", "BodyAccY", "BodyAccZ",
"BodyGyroX", "BodyGyroY", "BodyGyroZ",
"TotalAccX", "TotalAccY", "TotalAccZ")
?dapply
?apply
sapply(indexCollection, print)
apply(indexCollection, print)
generateList <- function(aDataFrame){
print(files.list[aDataFrame[,1]])
print(files.list[aDataFrame[,2]])
}
sapply(indexCollection, generateList)
generateList <- function(aDataFrame){
print(typeof(aDataFrame))
}
sapply(indexCollection, generateList)
generateList <- function(aDataFrame){
print(class(aDataFrame))
}
sapply(indexCollection, generateList)
generateList <- function(aDataFrame){
print(aDataFrame[1])
}
sapply(indexCollection, generateList)
generateList <- function(aDataFrame){
print(aDataFrame[[1]][1])
}
sapply(indexCollection, generateList)
generateList <- function(aDataFrame){
print(files.list[aDataFrame])
}
sapply(indexCollection, generateList)
sapply(indexCollection[,1], generateList)
generateList <- function(aDataFrame, segment){
print(segment)
}
sapply(indexCollection[,1], generateList, segment = "test")
total = 0
total = 0
generateList <- function(aDataFrame, segment){
total = total + 1
}
sapply(indexCollection[,1], generateList, segment = "test")
total
paste(1, ".txt")
paste(1, ".txt", sep = "")
sapply(indexCollection[,1], generateList, segment = "test", simplify = FALSE)
sapply(indexCollection[,1], generateList, segment = "test", simplify = TRUE)
?write
?file
?write
generateList <- function(aDataFrame, segment){
name = paste(aDataFrame, ".txt", sep= "")
write(segment, file = name)
}
sapply(indexCollection[,1], generateList, segment = "test", simplify = TRUE)
1:length(indexCollection)
1:nrow(indexCollection)
for(n in 1:nrow(indexCollection)){
print(files.list(indexCollection[n,1]))
}
files.list <- list.files(recursive = TRUE)
for(n in 1:nrow(indexCollection)){
print(file.list(indexCollection[n,1]))
}
for(n in 1:nrow(indexCollection)){
print(files.list(indexCollection[n,1]))
}
for(n in 1:nrow(indexCollection){
print(files.list[indexCollection[n,1]])
}
for(n in 1:nrow(indexCollection)){
print(files.list[indexCollection[n,1]])
}
Test = list()
Train = list()
sublistNames[1]
assign( paste( Test, "$", sublistNames[1], sep = ""), 15)
Test
paste( Test, "$", sublistNames[1], sep = "")
paste( "Test", "$", sublistNames[1], sep = "")
assign( paste( "Test", "$", sublistNames[1], sep = ""), 15)
Test
Test
Test[sublistNames[1]] = 15
Test$BodyAccX
l = list(a = c(1,2,3,4,4,5), b = c(1,2,3,4,4,5), c = = c(1,2,3,4,4,5))
l = list("a" = c(1,2,3,4,4,5), "b" = c(1,2,3,4,4,5), "c" = = c(1,2,3,4,4,5))
larpa = list("a" = c(1,2,3,4,4,5), "b" = c(1,2,3,4,4,5), "c" = = c(1,2,3,4,4,5))
larpa = list("a" = c(1,2,3,4,4,5), "b" = c(1,2,3,4,4,5), "c" = c(1,2,3,4,4,5))
larpa
sapply(larpa, sd)
sd(sapply(larpa, sd))
ls()
ls()[!"Results"]
ls()[ -"Results"]
ls()[!("Results")]
ls()["Results"]
greb("Results", ls()
)
grep("Results", ls())
ls()[-19]
ls()[ -(grep("Results", ls())]
ls()[ -(grep("Results", ls())) ]
rm(ls()[ -(grep("Results", ls())) ])
rm(list(ls()[ -(grep("Results", ls())) ]))
list(ls()[ -(grep("Results", ls())) ])
rm(list(ls()[ -(grep("Results", ls())) ]))
rm(patternList)
rm("$BodyAccX", completePath)
rm(ls())
rm(ls() = list())
rm(ls = list())
rm(list = (ls()[ -(grep("Results", ls())) ]))
Results
complileStat <- function(data, statFunc){
return( statFunc(sapply(data, statFunc)))
}
source('~/Docs/code/Documentation/rProgramming/rMachineLearning/MLWithR/Notes.R')
setwd("C:\\Users\\mitcolli\\Documents\\Docs\\code\\Documentation\\rProgramming\\rMachineLearning\\MLWithR\\c03")
list.files()
data = read.csv("wisc_bc_data.csv")
colnames(data)
data = read.csv("wisc_bc_data.csv", stringsAsFactors = FALSE)
data = read.csv("wisc_bc_data.csv", stringsAsFactors = FALSE)
str(data)
library(data.table)
data = data[-1]
table(data$Diagnosis)
table(data$diagnosis)
data$diagnosis = factor(data$diagnosis, levels = c("B", "M"),
labels = c("Benign", "Malignant"))
round(prop.table(data$diagnosis)) * 100, digits =1)
round(prop.table(data$diagnosis)) * 100, digits =1)
round(prop.table(table(data$diagnosis)) * 100, digits =1)
summary(wbcd[c("radius_mean", "area_mean", "smoothness_mean")])
summary(data[c("radius_mean", "area_mean", "smoothness_mean")])
normalize <- function(x){
return((x - min(x))/(max(x)) - min(x)))
}
normalize <- function(x){
return((x - min(x))/(max(x)) - min(x))
}
data_n <- as.data.frame(lapply(data[2:31], normalize))
data_n
summary(data_n$area_mean)
normalize <- function(x){
return((x - min(x))/(max(x) - min(x))
}
normalize <- function(x){
return((x - min(x))/(max(x) - min(x)))
}
data_n <- as.data.frame(lapply(data[2:31], normalize))
summary(data_n$area_mean)
list.files()
url = "http://report.spt.proofpoint.com/report.php?r=5&u1=2016-1-01&u2=2016-1-31&m=1&h=87f47f284a2a0e2547ed95e09857a2ac1ed8e6ee&export=csv"
download.file(url, destfile = "data.csv")
ls
temp = read.csv("data.csv")
colnames(temp)
temp = read.csv(url)
temp
data_train <- data_n[1:469,]
data_test <- data_n[1:469,]
data_train_labels <- data[1:469, 1]
data_test_labels <- data[470:569, 1]
?class
library(class)
